<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="strAdditionalInsured" xml:space="preserve">
    <value>Additional Insured: </value>
  </data>
  <data name="strAnotherCountry" xml:space="preserve">
    <value>Another country</value>
  </data>
  <data name="strBankAddress" xml:space="preserve">
    <value>Bank Address: </value>
  </data>
  <data name="strBankName" xml:space="preserve">
    <value>Bank Name: </value>
  </data>
  <data name="strBuyQuote" xml:space="preserve">
    <value>Buy Quote</value>
  </data>
  <data name="strCity" xml:space="preserve">
    <value>City: </value>
  </data>
  <data name="strCorporation" xml:space="preserve">
    <value>Corporation</value>
  </data>
  <data name="strDOB" xml:space="preserve">
    <value>Date of Birth: </value>
  </data>
  <data name="strExtNo" xml:space="preserve">
    <value>Exterior No.: </value>
  </data>
  <data name="strFee" xml:space="preserve">
    <value>Fee: </value>
  </data>
  <data name="strFIEL" xml:space="preserve">
    <value>FIEL: </value>
  </data>
  <data name="strGenerateCalculation" xml:space="preserve">
    <value>Calculation</value>
  </data>
  <data name="strID" xml:space="preserve">
    <value>ID Number: </value>
  </data>
  <data name="strIDType" xml:space="preserve">
    <value>ID Type: </value>
  </data>
  <data name="strIncNumber" xml:space="preserve">
    <value>Incorporation No.: </value>
  </data>
  <data name="strIndividual" xml:space="preserve">
    <value>Individual</value>
  </data>
  <data name="strIntNo" xml:space="preserve">
    <value>Interior No.: </value>
  </data>
  <data name="strLoanNumber" xml:space="preserve">
    <value>Loan Number: </value>
  </data>
  <data name="strMercNumber" xml:space="preserve">
    <value>Mercantile No.: </value>
  </data>
  <data name="strNationality" xml:space="preserve">
    <value>Nationality: </value>
  </data>
  <data name="strOccupation" xml:space="preserve">
    <value>Occupation: </value>
  </data>
  <data name="strPersonType" xml:space="preserve">
    <value>Person Type: </value>
  </data>
  <data name="strPremium" xml:space="preserve">
    <value>Net Premium: </value>
  </data>
  <data name="strPrintQuote" xml:space="preserve">
    <value>Print Quote</value>
  </data>
  <data name="strRepresentative" xml:space="preserve">
    <value>Legal Representative: </value>
  </data>
  <data name="strSameAddress" xml:space="preserve">
    <value>Does the insured live outside of Mexico?</value>
  </data>
  <data name="strState" xml:space="preserve">
    <value>State: </value>
  </data>
  <data name="strStreet" xml:space="preserve">
    <value>Street: </value>
  </data>
  <data name="strTax" xml:space="preserve">
    <value>Tax: </value>
  </data>
  <data name="strTaxID" xml:space="preserve">
    <value>Tax ID: </value>
  </data>
  <data name="strTotal" xml:space="preserve">
    <value>Total: </value>
  </data>
  <data name="strUSA" xml:space="preserve">
    <value>U.S.A.</value>
  </data>
  <data name="strZip" xml:space="preserve">
    <value>Zip Code: </value>
  </data>
  <data name="strYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="strValLength" xml:space="preserve">
    <value>Input too Long</value>
  </data>
  <data name="strRequired" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="strValFormat" xml:space="preserve">
    <value>Invalid Format</value>
  </data>
  <data name="strInsuredInformation" xml:space="preserve">
    <value>Insured Information</value>
  </data>
  <data name="strCountry" xml:space="preserve">
    <value>Country: </value>
  </data>
  <data name="strApril" xml:space="preserve">
    <value>April</value>
  </data>
  <data name="strAugust" xml:space="preserve">
    <value>August</value>
  </data>
  <data name="strDecember" xml:space="preserve">
    <value>December</value>
  </data>
  <data name="strFebruary" xml:space="preserve">
    <value>February</value>
  </data>
  <data name="strJanuary" xml:space="preserve">
    <value>January</value>
  </data>
  <data name="strJuly" xml:space="preserve">
    <value>July</value>
  </data>
  <data name="strJune" xml:space="preserve">
    <value>June</value>
  </data>
  <data name="strMarch" xml:space="preserve">
    <value>March</value>
  </data>
  <data name="strMay" xml:space="preserve">
    <value>May</value>
  </data>
  <data name="strNovember" xml:space="preserve">
    <value>November</value>
  </data>
  <data name="strOctober" xml:space="preserve">
    <value>October</value>
  </data>
  <data name="strSeptember" xml:space="preserve">
    <value>September</value>
  </data>
  <data name="strValCharacters" xml:space="preserve">
    <value>Invalid Characters</value>
  </data>
  <data name="strDOBHelp" xml:space="preserve">
    <value>DOB Help Text</value>
  </data>
  <data name="strFIELHelp" xml:space="preserve">
    <value>FIEL Help Text</value>
  </data>
  <data name="strIDHelp" xml:space="preserve">
    <value>ID Help Text</value>
  </data>
  <data name="strIDTypeHelp" xml:space="preserve">
    <value>ID Type Help Text</value>
  </data>
  <data name="strIncNumberHelp" xml:space="preserve">
    <value>Inc. Number Help Text</value>
  </data>
  <data name="strLegalRepHelp" xml:space="preserve">
    <value>Legal Rep Help Text</value>
  </data>
  <data name="strMercNumberHelp" xml:space="preserve">
    <value>Merc. Number Help Text</value>
  </data>
  <data name="strNationalityHelp" xml:space="preserve">
    <value>Nationality Help Text</value>
  </data>
  <data name="strOccupationHelp" xml:space="preserve">
    <value>Occupation Help Text</value>
  </data>
  <data name="strArt140" xml:space="preserve">
    <value>Article 140</value>
  </data>
  <data name="strPolicyInfo" xml:space="preserve">
    <value>Additional Policy Information</value>
  </data>
  <data name="strCorpDOB" xml:space="preserve">
    <value>Date of Incorporation: </value>
  </data>
  <data name="strCorpOccupation" xml:space="preserve">
    <value>Line of Business: </value>
  </data>
  <data name="strInsuredExtNo" xml:space="preserve">
    <value>Insured Exterior No.: </value>
  </data>
  <data name="strInsuredIntNo" xml:space="preserve">
    <value>Insured Interior No.: </value>
  </data>
  <data name="strInsuredStreet" xml:space="preserve">
    <value>Insured Street: </value>
  </data>
  <data name="strEmail" xml:space="preserve">
    <value>Email: </value>
  </data>
  <data name="strPhone" xml:space="preserve">
    <value>Phone No.: </value>
  </data>
  <data name="strEmailHelp" xml:space="preserve">
    <value>Email Help Text</value>
  </data>
  <data name="strPhoneHelp" xml:space="preserve">
    <value>Phone Help Text</value>
  </data>
  <data name="strValEmail" xml:space="preserve">
    <value>Invalid email</value>
  </data>
  <data name="strSaveQuote" xml:space="preserve">
    <value>Save Quote</value>
  </data>
  <data name="strNumPayments" xml:space="preserve">
    <value>Number of Payments:</value>
  </data>
  <data name="strRXPF" xml:space="preserve">
    <value>Split Payment Surcharge: </value>
  </data>
  <data name="strChangeFee" xml:space="preserve">
    <value>Change Fee</value>
  </data>
  <data name="strInvalidValue" xml:space="preserve">
    <value>Invalid Value</value>
  </data>
</root>